(function(h) {
    h.extend(!0, h.fn.zTree._z, {
        view: {
            clearOldFirstNode: function(d, i) {
                for(var f = i.getNextNode(); f;) {
                    if(f.isFirstNode) {
                        f.isFirstNode = !1;
                        e.setNodeLineIcos(d, f);
                        break
                    }
                    if(f.isLastNode) { break } f = f.getNextNode()
                }
            },
            clearOldLastNode: function(d, i, f) {
                for(i = i.getPreNode(); i;) {
                    if(i.isLastNode) {
                        i.isLastNode = !1;
                        f && e.setNodeLineIcos(d, i);
                        break
                    }
                    if(i.isFirstNode) { break } i = i.getPreNode()
                }
            },
            makeDOMNodeMainBefore: function(d, i, f) { d.push("<li ", f.isHidden ? "style='display:none;' " : "", "id='", f.tId, "' class='", b.className.LEVEL, f.level, "' tabindex='0' hidefocus='true' treenode>") },
            showNode: function(f, d) {
                d.isHidden = !1;
                c.initShowForExCheck(f, d);
                g(d, f).show()
            },
            showNodes: function(i, l, j) {
                if(l && l.length != 0) {
                    var f = {},
                        d, m;
                    for(d = 0, m = l.length; d < m; d++) {
                        var p = l[d];
                        if(!f[p.parentTId]) {
                            var o = p.getParentNode();
                            f[p.parentTId] = o === null ? c.getRoot(i) : p.getParentNode()
                        }
                        e.showNode(i, p, j)
                    }
                    for(var n in f) { l = f[n][i.data.key.children], e.setFirstNodeForShow(i, l), e.setLastNodeForShow(i, l) }
                }
            },
            hideNode: function(f, d) {
                d.isHidden = !0;
                d.isFirstNode = !1;
                d.isLastNode = !1;
                c.initHideForExCheck(f, d);
                e.cancelPreSelectedNode(f, d);
                g(d, f).hide()
            },
            hideNodes: function(i, l, j) {
                if(l && l.length != 0) {
                    var f = {},
                        d, m;
                    for(d = 0, m = l.length; d < m; d++) {
                        var p = l[d];
                        if((p.isFirstNode || p.isLastNode) && !f[p.parentTId]) {
                            var o = p.getParentNode();
                            f[p.parentTId] = o === null ? c.getRoot(i) : p.getParentNode()
                        }
                        e.hideNode(i, p, j)
                    }
                    for(var n in f) { l = f[n][i.data.key.children], e.setFirstNodeForHide(i, l), e.setLastNodeForHide(i, l) }
                }
            },
            setFirstNode: function(j, f) {
                var d = j.data.key.children,
                    i = f[d].length;
                i > 0 && !f[d][0].isHidden ? f[d][0].isFirstNode = !0 : i > 0 && e.setFirstNodeForHide(j, f[d])
            },
            setLastNode: function(j, f) {
                var d = j.data.key.children,
                    i = f[d].length;
                i > 0 && !f[d][0].isHidden ? f[d][i - 1].isLastNode = !0 : i > 0 && e.setLastNodeForHide(j, f[d])
            },
            setFirstNodeForHide: function(j, d) {
                var l, i, f;
                for(i = 0, f = d.length; i < f; i++) {
                    l = d[i];
                    if(l.isFirstNode) { break }
                    if(!l.isHidden && !l.isFirstNode) {
                        l.isFirstNode = !0;
                        e.setNodeLineIcos(j, l);
                        break
                    } else { l = null }
                }
                return l
            },
            setFirstNodeForShow: function(n, f) {
                var d, m, j, l, i;
                for(m = 0, j = f.length; m < j; m++) {
                    if(d = f[m], !l && !d.isHidden && d.isFirstNode) { l = d; break } else {
                        if(!l && !d.isHidden && !d.isFirstNode) { d.isFirstNode = !0, l = d, e.setNodeLineIcos(n, d) } else {
                            if(l && d.isFirstNode) {
                                d.isFirstNode = !1;
                                i = d;
                                e.setNodeLineIcos(n, d);
                                break
                            }
                        }
                    }
                }
                return { "new": l, old: i }
            },
            setLastNodeForHide: function(j, f) {
                var d, i;
                for(i = f.length - 1; i >= 0; i--) {
                    d = f[i];
                    if(d.isLastNode) { break }
                    if(!d.isHidden && !d.isLastNode) {
                        d.isLastNode = !0;
                        e.setNodeLineIcos(j, d);
                        break
                    } else { d = null }
                }
                return d
            },
            setLastNodeForShow: function(l, d) {
                var m, j, f, i;
                for(j = d.length - 1; j >= 0; j--) {
                    if(m = d[j], !f && !m.isHidden && m.isLastNode) { f = m; break } else {
                        if(!f && !m.isHidden && !m.isLastNode) { m.isLastNode = !0, f = m, e.setNodeLineIcos(l, m) } else {
                            if(f && m.isLastNode) {
                                m.isLastNode = !1;
                                i = m;
                                e.setNodeLineIcos(l, m);
                                break
                            }
                        }
                    }
                }
                return { "new": f, old: i }
            }
        },
        data: {
            initHideForExCheck: function(f, d) {
                if(d.isHidden && f.check && f.check.enable) {
                    if(typeof d._nocheck == "undefined") { d._nocheck = !!d.nocheck, d.nocheck = !0 } d.check_Child_State = -1;
                    e.repairParentChkClassWithSelf && e.repairParentChkClassWithSelf(f, d)
                }
            },
            initShowForExCheck: function(d, i) {
                if(!i.isHidden && d.check && d.check.enable) {
                    if(typeof i._nocheck != "undefined") { i.nocheck = i._nocheck, delete i._nocheck }
                    if(e.setChkClass) {
                        var f = g(i, b.id.CHECK, d);
                        e.setChkClass(d, f, i)
                    }
                    e.repairParentChkClassWithSelf && e.repairParentChkClassWithSelf(d, i)
                }
            }
        }
    });
    var h = h.fn.zTree,
        a = h._z.tools,
        b = h.consts,
        e = h._z.view,
        c = h._z.data,
        g = a.$;
    c.addInitNode(function(d, i, f) {
        if(typeof f.isHidden == "string") { f.isHidden = a.eqs(f.isHidden, "true") } f.isHidden = !!f.isHidden;
        c.initHideForExCheck(d, f)
    });
    c.addBeforeA(function() {});
    c.addZTreeTools(function(d, i) {
        i.showNodes = function(l, j) { e.showNodes(d, l, j) };
        i.showNode = function(l, j) { l && e.showNodes(d, [l], j) };
        i.hideNodes = function(l, j) { e.hideNodes(d, l, j) };
        i.hideNode = function(l, j) { l && e.hideNodes(d, [l], j) };
        var f = i.checkNode;
        if(f) {
            i.checkNode = function(l, j, n, m) {
                (!l || !l.isHidden) && f.apply(i, arguments)
            }
        }
    });
    var z = c.initNode;
    c.initNode = function(j, i, n, f, d, m, o) {
        var l = (f ? f : c.getRoot(j))[j.data.key.children];
        c.tmpHideFirstNode = e.setFirstNodeForHide(j, l);
        c.tmpHideLastNode = e.setLastNodeForHide(j, l);
        o && (e.setNodeLineIcos(j, c.tmpHideFirstNode), e.setNodeLineIcos(j, c.tmpHideLastNode));
        d = c.tmpHideFirstNode === n;
        m = c.tmpHideLastNode === n;
        z && z.apply(c, arguments);
        o && m && e.clearOldLastNode(j, n, o)
    };
    var y = c.makeChkFlag;
    if(y) {
        c.makeChkFlag = function(f, d) {
            (!d || !d.isHidden) && y.apply(c, arguments)
        }
    }
    var w = c.getTreeCheckedNodes;
    if(w) { c.getTreeCheckedNodes = function(j, d, l, f) { if(d && d.length > 0) { var i = d[0].getParentNode(); if(i && i.isHidden) { return [] } } return w.apply(c, arguments) } }
    var u = c.getTreeChangeCheckedNodes;
    if(u) { c.getTreeChangeCheckedNodes = function(j, f, d) { if(f && f.length > 0) { var i = f[0].getParentNode(); if(i && i.isHidden) { return [] } } return u.apply(c, arguments) } }
    var k = e.expandCollapseSonNode;
    if(k) {
        e.expandCollapseSonNode = function(j, d, l, i, f) {
            (!d || !d.isHidden) && k.apply(e, arguments)
        }
    }
    var x = e.setSonNodeCheckBox;
    if(x) {
        e.setSonNodeCheckBox = function(j, f, d, i) {
            (!f || !f.isHidden) && x.apply(e, arguments)
        }
    }
    var v = e.repairParentChkClassWithSelf;
    if(v) {
        e.repairParentChkClassWithSelf = function(f, d) {
            (!d || !d.isHidden) && v.apply(e, arguments)
        }
    }
})(jQuery);

function ztree_search(g, i, e, f) {
    if(!g || !i) { alert("tree搜索参数不全"); return }
    var d = $.fn.zTree.getZTreeObj(g);
    var b = d.getNodes();
    var a = b;
    h(b);
    var c = f || ["name"];

    function j() {
        var p = [];
        var k = [];
        d.hideNodes(b);
        var m = $.trim($("#" + i).val());
        if(m == "") { d.showNodes(a) } else {
            m = m.toLowerCase();
            for(var l = 0; l < c.length; l++) {
                var s = d.getNodesByParamFuzzy(c[l], m, null);
                p = p.concat(s)
            }
            for(var l = 0; l < p.length; l++) { k = k.concat(p[l].getPath()) } d.showNodes(k);
            h(b);
            for(var o = 0; o < a.length; o++) { var r = true; for(var q = 0; q < k.length; q++) { if(a[o].tId === k[q].tId) { r = false } } if(r == true) { d.hideNode(a[o]) } } d.expandAll(true)
        }
    }
    $("#" + e).on("click", function() { j() });
    $("#" + i).on("keydown", function(k) { var k = k || window.event; if(k.keyCode == "13") { j() } });

    function h(m) {
        if(m) {
            for(var l = 0; l < m.length; l++) {
                var k = m[l].children;
                if(k) {
                    a = a.concat(k);
                    h(k)
                }
            }
        }
    }
}